# Build and run tests
name: CI

on:
  push:
    branches:
    - main
    - develop
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: cargo ${{ matrix.check }}, os=${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        check:
        - fmt
        - clippy
        - test
    steps:
    - name: checkout sources
      uses: actions/checkout@v2

    - name: install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal

    - name: install protoc
      uses: arduino/setup-protoc@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: cargo cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.check }}-${{ matrix.os }}

    - name: cargo fmt
      if: matrix.check == 'fmt'
      run: cargo fmt --check

    - name: cargo clippy
      if: matrix.check == 'clippy'
      run: cargo clippy

    - name: cargo test
      if: matrix.check == 'test'
      run: cargo test --all

  build_binaries:
    name: build ${{ matrix.binary }}, target=${{ matrix.job.target }}, os=${{ matrix.job.os }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      matrix:
        binary:
        - apibara-starknet
        job:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-musl
        - os: ubuntu-latest
          target: aarch64-unknown-linux-musl
        - os: macos-latest
          target: x86_64-apple-darwin
        - os: macos-latest
          target: aarch64-apple-darwin
    steps:
    - name: checkout sources
      uses: actions/checkout@v2

    - name: install rust stable (${{ matrix.job.target }})
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.job.target }}
        override: true
        profile: minimal

    - name: install protoc
      uses: arduino/setup-protoc@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: cargo cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.binary }}-${{ matrix.job.os }}-${{ matrix.job.target }}

    - name: build ${{ matrix.binary }}
      run: cargo build --bin ${{ matrix.binary }} --release

    - name: upload artifacts ${{ matrix.binary }}-${{ matrix.job.target }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.binary }}-${{ matrix.job.target }}
        path: target/release/${{ matrix.binary }}
        retention-days: 1

  docker_build:
    name: build docker image ${{ matrix.image.binary }}, target=${{ matrix.target.rust }}
    runs-on: ubuntu-latest
    needs:
    - build_binaries
    - check
    strategy:
      matrix:
        image:
        - binary: apibara-starknet
          name: starknet
        target:
        - rust: x86_64-unknown-linux-musl
          alpine: amd64
        - rust: aarch64-unknown-linux-musl
          alpine: arm64v8
    steps:
    - name: setup docker buildx
      uses: docker/setup-buildx-action@v2

    - name: download ${{ matrix.image.binary }}
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.image.binary }}-${{ matrix.target.rust }}
        path: .

    - name: create dockerfile
      run: |
        touch Dockerfile
        echo "FROM ${{ matrix.target.alpine }}/alpine:3.16" >> Dockerfile
        echo "COPY ${{ matrix.image.binary }} ${{ matrix.image.binary }}" >> Dockerfile

    - name: build image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: false
        tags: apibara/${{ matrix.image.name }}:${{ github.sha }}-${{ matrix.target.alpine }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=apibara-${{ matrix.image.name }}-${{ matrix.target.alpine }}.tar

    - name: upload artifact ${{ matrix.image.name }}
      uses: actions/upload-artifact@v3
      with:
        name: apibara-${{ matrix.image.name }}-${{ matrix.target.alpine }}.tar
        path: apibara-${{ matrix.image.name }}-${{ matrix.target.alpine }}.tar
        retention-days: 1

  docker_publish:
    name: publish docker image ${{ matrix.image }}
    runs-on: ubuntu-latest
    needs: docker_build
    strategy:
      matrix:
        image:
        - starknet
    
    steps:
    - name: setup docker buildx
      uses: docker/setup-buildx-action@v2

    - name: login to docker hub
      uses: docker/login-action@v2
      with:
        username: apibara
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: download ${{ matrix.image }}-amd64
      uses: actions/download-artifact@v3
      with:
        name: apibara-${{ matrix.image }}-amd64.tar
        path: .

    - name: download ${{ matrix.image }}-arm64v8
      uses: actions/download-artifact@v3
      with:
        name: apibara-${{ matrix.image }}-arm64v8.tar
        path: .

    - name: load docker images
      run: |
        ls -la
        docker image load --input apibara-${{ matrix.image }}-amd64.tar
        docker image load --input apibara-${{ matrix.image }}-arm64v8.tar
        docker image ls -a

    # create a manifest manually since the images are created by copying files into them
    - name: publish docker images to docker.io
      run: |
        docker tag apibara/${{ matrix.image }}:${{ github.sha }}-amd64 docker.io/apibara/${{ matrix.image }}:${{ github.sha }}-amd64
        docker tag apibara/${{ matrix.image }}:${{ github.sha }}-arm64v8 docker.io/apibara/${{ matrix.image }}:${{ github.sha }}-arm64v8

        docker push docker.io/apibara/${{ matrix.image }}:${{ github.sha }}-amd64
        docker push docker.io/apibara/${{ matrix.image }}:${{ github.sha }}-arm64v8

        docker manifest create docker.io/apibara/${{ matrix.image }}:${{ github.sha }} \
          docker.io/apibara/${{ matrix.image }}:${{ github.sha }}-amd64 \
          docker.io/apibara/${{ matrix.image }}:${{ github.sha }}-arm64v8
        docker manifest push docker.io/apibara/${{ matrix.image }}:${{ github.sha }}

  update_preview_release:
    name: update preview release
    # if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: docker_publish
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: checkout sources
      uses: actions/checkout@v2

    - name: login gh
      run: gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})

    - name: delete old version of the release
      run: gh release delete --yes --repo apibara/apibara preview  || true

    - name: create release
      run: |
        gh release create \
          --repo apibara/apibara \
          --prerelease \
          --target ${{ github.sha }} \
          --title "Preview" \
          --notes "Preview build from the latest `develop` commit." \
          preview